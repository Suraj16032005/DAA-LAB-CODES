
LONGEST PALINDROMIC SUBSEQUENCE
import java.util.*;
public class Main
{
    
    public static int LPS(String str){
        int n=str.length();
        int dp[][]=new int[n][n];
        
        for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(j==i)dp[i][j]=1;
            else dp[i][j]=0;
        }
        }
        
        for(int len=2;len<=n;len++){
            for(int i=0; i<=n-len;i++){
                int j=i+(len-1);
                if(str.charAt(i)==str.charAt(j)){
                    if(len==2){
                        dp[i][j]=2;
                    }else{
                        dp[i][j]=2+dp[i+1][j-1];
                    }
                }else{
                    dp[i][j]=Math.max(dp[i+1][j], dp[i][j-1]);
                }
            }
        }
        return dp[0][n-1];
    }
    
	public static void main(String[] args) {
		System.out.println("enter the string: ");
		Scanner sc=new Scanner(System.in);
		String str=sc.nextLine();
		System.out.println(LPS(str));
		
	}
}



C IMPLEMENTATION-------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int maximum(int a, int b){
    if(a>b)return a;
    else return b;
}

int check(char str[]){
    int n=strlen(str);
    int dp[n][n];
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(i==j)dp[i][j]=1;
            else dp[i][j]=0;
        }
    }

 for(int length=2;length<=n;length++){
    for(int i=0;i<=n-length;i++){
       int j=i+length-1;
       if(str[i]==str[j]){
        if(length==2){
            dp[i][j]=2;
        }
        else{
         dp[i][j]=2+dp[i+1][j-1];
        }
       }
       else{
        dp[i][j]=maximum(dp[i+1][j], dp[i][j-1]);
       }
    }
 }
    return dp[0][n-1];
}



int main(){
 char str[100];
 printf("enter the string\n");
 scanf("%s",&str);
 int ans=check(str);
 printf("the ans is: %d", ans);
    return 0;
}   
