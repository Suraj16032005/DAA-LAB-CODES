PROBLEM 1----> CHECK IF THERE EXISTS A PATH FROM NODE 1 TO NODE A
(where A is the no of vertices in the graph)
(where Node 1 is the starting vertex of the graph)

Approach-> DO A BFS/DFS TRAVEL FROM NODE 1 TO A 
if in the traversal A appears then there exists a path, else there doesnt exist


import java.util.*;
public class Main
{
    public static boolean checkReach(int[][]matrix, int nodes){
      Queue<Integer> queue=new LinkedList<>();
      queue.offer(0);
       int visited[]=new int[nodes];
       for(int i=0;i<nodes;i++){
           visited[i]=0;
       }
      while(!queue.isEmpty()){
          int check=queue.poll();
          visited[check]=1;
          if(check==nodes-1)return true;
          for(int i=0;i<nodes;i++){
              if(visited[i]!=1 && matrix[check][i]==1){queue.offer(i);visited[i]=1;}
          }
           
      }    return false;
    }
    
    
    
    
    
    
	public static void main(String[] args) {
		System.out.println("enter the number of nodes in the graph: ");
		Scanner sc=new Scanner(System.in);
		int nodes=sc.nextInt();
			System.out.println("enter the number of edges in the graph: ");
			int edges=sc.nextInt();
			int[][] list=new int[edges][2];
			for(int i=0;i<edges;i++){
			  for(int j=0;j<2;j++){
			      list[i][j]=sc.nextInt();
			  }  
			}
			
			int matrix[][]=new int[nodes][nodes];
			for(int i=0;i<nodes;i++){
			    for(int j=0;j<nodes;j++){
			        matrix[i][j]=0;
			    }
			}
			
			for(int i=0;i<edges;i++){
			    matrix[list[i][0]-1][list[i][1]-1]=1;
			}
				for(int i=0;i<nodes;i++){
			    for(int j=0;j<nodes;j++){
			        System.out.print(matrix[i][j]);
			    }
			    System.out.println(" ");
			}
			
       System.out.println("there exists an edge between Node1 to Node" + edges+" This statement is "+ checkReach(matrix,nodes) );
	}
}
